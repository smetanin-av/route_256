"""
Римская система счисления содержит символы: I, V, X, L, C, D и M.
Следующие цифры римской системы счисления соответствуют символам в десятичной системе:
I = 1; V = 5; X = 10; L = 50; C = 100; D = 500; M = 1000.
Числа в римской системе обычно записываются от большего к меньшему, слева направо, например, семь можно записать как
V + II = VII, а двадцать семь как XX + V + II = XXVII.

Однако, число 4 записывается не как IIII, а как IV. Т.е. Для получения некоторых цифр в римской системе счисления
используется принцип вычитания.

Следующие правила задают условия, при которых следует использовать принцип вычитания:
    1. I может предшествовать V (5) и X (10) для получения 4-х и 9-и соответственно;
    2. X может предшествовать L (50) и С (100) для получения 40-а и 90-а соответственно;
    3. С может предшествовать D (500) и M (1000) для получения 400-а и 900-а соответственно;

Но не всё так просто. Согласно классическим римским правилам, максимальное число, которое может быть представлено в
этой системе счисления, это 4999. Однако есть способы, которые позволяют обойти это ограничение. Мы будем использовать
модификацию vinculum. В базовой версии это позволяет разделить число на два блока цифр, первый из которых умножается
на 1000, т.е. IV|DCXXVII = 4 627, при этом второй блок не больше тысячи, чтобы не было коллизий при записи.
Мы же пойдём чуть дальше и введём следующие правила:
    1. Может быть сколько угодно много блоков, которые разделены символом |
    2. Каждый из блоков, кроме первого, содержит в себе число меньше 1000
    3. Первый блок может быть каким угодно римским числом.

Формат входных данных
На вход передается пара римских чисел a и b, записанных в римской форме с указанной выше модификацией.
Числа подаются в одной строке, через пробел. Общая длина чисел <= 10^5

Формат выходных данных
Необходимо написать программу сравнения, которая возвращает -1, если a меньше b, 0, если равны, 1, если a больше b.
"""

_ROMAN_to_ARABIC = {
    'M': 1000,
    'D': 500,
    'C': 100,
    'L': 50,
    'X': 10,
    'V': 5,
    'I': 1,
    'N': 0
}


def simple_roman_to_arabic(roman: str) -> int:
    result = 0
    prev_val = None
    for digit in reversed(roman):
        curr_val = _ROMAN_to_ARABIC[digit]
        if not prev_val or curr_val >= prev_val:
            result += curr_val
        else:
            result -= curr_val
        prev_val = curr_val
    return result


def complex_roman_to_arabic(roman: str) -> int:
    result = 0
    parts = roman.split('|')
    for part in parts:
        result = result * 1000 + simple_roman_to_arabic(part)
    return result


def solve():
    values = input().upper().split()
    first, second = map(complex_roman_to_arabic, values)
    if first < second:
        print(-1)
    elif first == second:
        print(0)
    else:
        print(1)


if __name__ == '__main__':
    solve()
